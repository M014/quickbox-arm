#!/bin/bash
#
# [QuickBox ARM Flexget Updater]
#
# GitHub:   https://github.com/amefs/quickbox-arm
# Author:   Amefs
# Current version:  v1.2.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _excute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

function _version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="FlexGet"
APP_NAME="flexget"
APP_SERVICE="flexget"
APP_BASEDEPS="python3-pip"

OUTTO=/srv/dashboard/db/output.log
username=$(cat /root/.admin.info | cut -d: -f1)
APP_LOCK=.${username}.${APP_NAME}.lock

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox ARM $APP_TITLE Updater"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [-u username]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "-u, --user <username>     the user for this updater"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# REMOVE FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ ! -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} haven't installed ..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	rm -f /install/.install.lock
}

function _updateInfo() {
	_print "
$APP_TITLE will now be updated.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_excute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_excute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _updateApp() {
	# remove old flexget
	_info "Removing old ${APP_TITLE}..."
	_excute "systemctl stop ${APP_SERVICE}@${username}"
	su ${username} -c 'python2 -m pip uninstall flexget -y' >>"${OUTTO}" 2>&1
	_success "${APP_TITLE} removed."

	# install flexget via pip3
	_installSystemUpdates
	if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
		APP_BASEDEPS="build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget libsqlite3-dev"
		_installDepends
		_info "Compiling Python 3.7 ..."
		cd /tmp
		wget -q -O Python-3.7.6.tar.xz https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz
		tar -xf Python-3.7.6.tar.xz
		cd Python-3.7.6
		_excute "./configure"
		_excute "make -j$(nproc)"
		_excute "make altinstall"
		_excute "update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1"
		_excute "update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.7 2"
		rm -rf {Python-3.7.6.tar.xz,Python-3.7.6}
		if [[ ! -f /usr/local/lib/python3.7/site-packages/lsb_release.py ]]; then
			ln -s /usr/lib/python3/dist-packages/lsb_release.py /usr/local/lib/python3.7/site-packages/lsb_release.py
		fi
		_success "Python 3.7 installed"
	else
		_installDepends
	fi

	_info "Building ${APP_TITLE}..."
	# Install for single user
	cd /tmp
	wget -q -O get-pip.py https://bootstrap.pypa.io/get-pip.py
	_excute 'python3 get-pip.py --force-reinstall'
	_excute 'pip3 install --upgrade setuptools'
	_excute 'pip3 install --upgrade pyopenssl'
	_excute 'pip3 install --upgrade cryptography'
	#su ${username} -c 'pip3 install --user flexget' >>"${OUTTO}" 2>&1
	#temporarily lock the version
	su ${username} -c 'pip3 install --user flexget==3.0.31' >>"${OUTTO}" 2>&1
	if [[ -f /install/.transmission.lock ]]; then
		_excute 'pip3 install transmissionrpc'
	fi
	_reconfigureApp
	_excute "systemctl start ${APP_SERVICE}@${username}"
	_success "${APP_TITLE} Built."
}

function _reconfigureApp() {
	_info "Configuring ${APP_TITLE}..."
	pypath=$(su ${username} -c 'python3 -m site --user-site')
	mkdir -p /tmp/
	cat >/tmp/flexget-user-passwd.patch <<'EOF'
diff -Nur '--exclude=.git' '--exclude=.vs' flexget/webserver.py flexget-patched/webserver.py
--- flexget/webserver.py	2019-07-02 18:07:23.109855300 +0200
+++ flexget-patched/webserver.py	2019-07-02 20:44:50.134619000 +0200
@@ -232,7 +232,7 @@
 
 
 @with_session
-def get_user(username='flexget', session=None):
+def get_user(username='replace', session=None):
     user = session.query(User).filter(User.name == username).first()
     if not user:
         user = User()
@@ -242,8 +242,9 @@
 
 
 @with_session
-def change_password(username='flexget', password='', session=None):
+def change_password(username='replace', password='', session=None):
     check = zxcvbn.zxcvbn(password, user_inputs=[username])
+    check['score'] = 4
     if check['score'] < 3:
         warning = check['feedback']['warning']
         suggestions = ' '.join(check['feedback']['suggestions'])
@@ -260,7 +261,7 @@
 
 
 @with_session
-def generate_token(username='flexget', session=None):
+def generate_token(username='replace', session=None):
     user = get_user(username=username, session=session)
     user.token = generate_key()
     session.commit()
EOF
	sed -i "s/username='replace'/username='${username}'/g" /tmp/flexget-user-passwd.patch
	patch -p1 -d ${pypath}/flexget/ </tmp/flexget-user-passwd.patch >>"${OUTTO}" 2>&1
	su ${username} -c "python3 -m compileall ${pypath}/flexget/webserver.py" >>"${OUTTO}" 2>&1
	rm -rf /tmp/flexget-user-passwd.patch
	sed -i "s/\\\'flexget\\\'/\\\'\\\'/g" ${pypath}/flexget/ui/v1/app/scripts/app.js
	_success "${APP_TITLE} configured."
}

#################################################################################
# OPT GENERATOR
#################################################################################
ARGS=$(getopt -a -o hl:u: -l help,log:,user: -- "$@")
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	-u | --user)
		username="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_updateInfo
_updateApp
_lockCleanup

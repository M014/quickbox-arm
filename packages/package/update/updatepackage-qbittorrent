#!/bin/bash
#
# [QuickBox ARM qBittorrent Updater]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.0.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _excute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
}

function _version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="qBittorrent"
APP_NAME="qbittorrent"
APP_SERVICE="qbittorrent"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
deb_version_list=['4.1.7','4.1.8','4.1.9.1','4.2.0','4.2.1']
qbitversion=4.2.1
BRANCH_QBIT="https://github.com/qbittorrent/qBittorrent.git"
BRANCH_LIBQBPASS="https://github.com/KozakaiAya/libqbpasswd.git"
FORCE=0

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox ARM $APP_TITLE Updater"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [--qb]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "--qb <version>            the qbittorrent version you want to install"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# REMOVE FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ ! -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} haven't installed ..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	rm -f /install/.install.lock
}

function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_excute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_excute "gem install --no-ri --no-rdoc fpm"
		_success "fpm installed."
	fi
}

function _updateInfo() {
	_print "
$APP_TITLE will now be updated.

This process may take a few minutes
Please wait until the process is completed
"
}

function _updateApp() {
	# get current version
	cur_version=$(dpkg -s qbittorrent-nox | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
	if (_version_gt ${qbitversion} ${cur_version}) ||  [[ $FORCE == 1 ]] ; then
		_info "Updating ${APP_TITLE}..."
		_info "Removing old ${APP_TITLE}..."
		userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
		for username in $userlist; do
			_excute "systemctl stop ${APP_SERVICE}@${username}"
		done
		_excute "apt-mark unhold qbittorrent-nox"
		_excute "apt remove -y qbittorrent-nox"
		if [[ ${deb_version_list[*]} =~ ${qbitversion} && ! -f /install/.libtorrent-rasterbar.lock ]]; then
			cd /tmp || exit 1
			if (_version_gt ${qbitversion} 4.1.9.1); then
				if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
					cd /tmp
					QTBIN=qt512base_5.12.6-1basyskom1_armhf.deb
					wget -q -O ${QTBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qt5/${QTBIN}/download
					_excute "apt install -y /tmp/${QTBIN}"
					rm -rf ${QTBIN}
				fi
			fi
			QBITBIN=qbittorrent-nox_${qbitversion}-libt1.1-1build1_armhf.deb
			wget -q -O ${QBITBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qbittorrent/${QBITBIN}/download
			_excute "apt install -y /tmp/${QBITBIN}"
			rm -rf ${QBITBIN}

			# disable auto upgrade
			_excute "apt-mark hold qbittorrent-nox"
		else
			# prepare package toolchain
			APP_BASEDEPS="build-essential libgl1-mesa-dev libssl-dev libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libboost-python-dev python python-dev python3 python3-dev pkg-config automake libtool git screen libgeoip-dev qtbase5-dev qttools5-dev-tools libqt5svg5-dev zlib1g-dev"
			_installDepends
			_installFpm
			if (_version_gt ${qbitversion} 4.1.9.1); then
				if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
					cd /tmp
					QTBIN=qt512base_5.12.6-1basyskom1_armhf.deb
					wget -q -O ${QTBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qt5/${QTBIN}/download
					_excute "apt install -y /tmp/${QTBIN}"
					rm -rf ${QTBIN}
					QTBIN=qt512xmlpatterns_5.12.6-1basyskom1_armhf.deb
					wget -q -O ${QTBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qt5/${QTBIN}/download
					_excute "apt install -y /tmp/${QTBIN}"
					rm -rf ${QTBIN}
					QTBIN=qt512declarative_5.12.6-1basyskom1_armhf.deb
					wget -q -O ${QTBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qt5/${QTBIN}/download
					_excute "apt install -y /tmp/${QTBIN}"
					rm -rf ${QTBIN}
					QTBIN=qt512svg_5.12.6-1basyskom1_armhf.deb
					wget -q -O ${QTBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qt5/${QTBIN}/download
					_excute "apt install -y /tmp/${QTBIN}"
					rm -rf ${QTBIN}
					QTBIN=qt512tools_5.12.6-1basyskom1_armhf.deb
					wget -q -O ${QTBIN} https://sourceforge.net/projects/seedbox-software-for-linux/files/${CODENAME}/binary-armhf/qt5/${QTBIN}/download
					_excute "apt install -y /tmp/${QTBIN}"
					rm -rf ${QTBIN}
					source /opt/qt512/bin/qt512-env.sh
				fi
			fi
			cd /tmp || exit 1
			_info "Building $APP_TITLE ... "
			_excute "git clone ${BRANCH_QBIT} qBittorrent"
			cd qBittorrent || { _error "Can not download qBittorrent" && exit 1; }
			_excute "git checkout release-${qbitversion}"
			_excute "./configure --disable-gui --disable-debug --prefix=/tmp/dist/qbittorrent"
			_excute "make -j$(nproc)"
			mkdir -p /tmp/dist/qbittorrent
			_excute "make install"
			fpm -f -C /tmp/dist/qbittorrent -p /root/pool/qbittorrent_${qbitversion}.deb -s dir -t deb -n qbittorrent-nox --version ${qbitversion} --description "qBittorrent compiled by QuickBox ARM" >/dev/null 2>&1
			_excute "dpkg -i /root/pool/qbittorrent_${qbitversion}.deb"
			cd /tmp || exit 1
			rm -rf {qBittorrent,libtorrent,dist}
			# disable auto upgrade
			_excute "apt-mark hold qbittorrent-nox"
		fi
		if (_version_gt ${qbitversion} 4.1.9.1) && (_version_gt 4.2.0 ${cur_version}); then
			_reconfigureAppv2
		elif (_version_gt 4.2.0 ${qbitversion}) && (_version_gt ${cur_version} 4.1.9.1); then
			_reconfigureAppv1
		fi
		userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
		for username in $userlist; do
			_excute "systemctl start ${APP_SERVICE}@${username}"
		done
		_success "${APP_TITLE} is now update to date."
	else
		_warning "Nothing to be update"
	fi
}

function _reconfigureAppv1() {
	_info "Configuring ${APP_TITLE}..."
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		if [[ $CODENAME == xenial ]]; then
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -a -d -pass pass:"${passphrase}" -nosalt)
		else
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)
		fi

		ha1pass=$(echo -n "${password}" | md5sum | cut -f1 -d' ')
		sed -i "s/Password_PBKDF2.*/Password_ha1=@ByteArray(${ha1pass})/g" /home/${username}/.config/qBittorrent/qBittorrent.conf
	done
	_success "${APP_TITLE} configured."
}

function _reconfigureAppv2() {
	_info "Configuring ${APP_TITLE}..."
	# get libqbpasswd
	## See https://github.com/KozakaiAya/libqbpasswd
	cd /tmp
	_info "Building libqbpasswd ... "
	_excute "apt-get install -yqq build-essential"
	_excute "git clone ${BRANCH_LIBQBPASS} libqbpasswd"
	cd libqbpasswd
	_excute "make"
	_excute "cp -f qb_password_gen /usr/local/bin/quickbox/system/auxiliary/qb_password_gen"
	cd /tmp
	rm -rf /tmp/libqbpasswd
	
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		if [[ $CODENAME == xenial ]]; then
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -a -d -pass pass:"${passphrase}" -nosalt)
		else
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)
		fi

		pbkdf2pass=$(/usr/local/bin/quickbox/system/auxiliary/qb_password_gen ${password})
		sed -i "s/Password_ha1.*/Password_PBKDF2=\'@ByteArray(${pbkdf2pass})\'/g" /home/${username}/.config/qBittorrent/qBittorrent.conf
	done
	_success "${APP_TITLE} configured."
}

function _flexget() {
	username=$(cat /root/.admin.info | cut -d: -f1)
	if [[ -f "/install/.${username}.flexget.lock" ]]; then
		if (su ${username} -c 'pip2 freeze --disable-pip-version-check | grep -q "FlexGet"'); then
			bash /usr/local/bin/quickbox/package/update/updatepackage-flexget -l $OUTTO
		fi
	fi
}

#################################################################################
# OPT GENERATOR
#################################################################################
ARGS=$(getopt -a -o hl: -l help,force,log:,qb: -- "$@")
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	--force)
		FORCE=1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--qb)
		qbitversion="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_updateInfo
_updateApp
_lockCleanup

if (_version_gt ${qbitversion} 4.1.9.1); then
	_flexget
fi
